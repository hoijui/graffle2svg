#!/usr/bin/env python3
# SPDX-FileCopyrightText: 2009-2015 Tim Wintle
# SPDX-FileCopyrightText: 2011 Jean-Noel Avila <jn.avila@free.fr>
# SPDX-FileCopyrightText: 2015 St√©phane Galland <galland@arakhne.org>
# SPDX-FileCopyrightText: 2022 Yasuoka Masahiko <yasuoka@yasuoka.net>
# SPDX-FileCopyrightText: 2023 Robin Vobruba <hoijui.quaero@gmail.com>
#
# SPDX-License-Identifier: BSD-3-Clause

"""
   Main entry point for graffle2svg
"""

import sys

from graffle2svg.main import *

def get_options():
    from optparse import OptionParser
    usage = """
       %prog [options] SOURCE DESTINATION
   or: %prog [options] DESTINATION
   or: %prog [options] --display SOURCE
   or: %prog [options] --display
   or: %prog [options] --stdout SOURCE
   or: %prog [options] --stdout"""

    parser = OptionParser(usage=usage)
    parser.add_option("-c", "--stdout", dest="stdout",
                        help="write converted SVG to stdout",
                        action="store_true")
    parser.add_option("-d", "--display", dest="display",
                        help="display the file using default svg viewer. Output is ignored",
                        action="store_true")
    parser.add_option("-e", "--extract", dest="area", action="store", type="string",
                      help="extract the area given by ((x1,y1),(x2,y2))")
    parser.add_option("-p", "--page", dest="page",
                        help="for multi-page documents, page number to extract")
    parser.add_option("-v", "--verbose", dest="verbose",
                        help="verbose",
                        action="store_true")

    (options, args) = parser.parse_args()
    # set up rest of options
    optsdict = {}
    optsdict["stdin"] = False

    if options.stdout :
        if len(args) > 1:
            parser.error("Too many arguments")
        elif len(args) == 0:
            optsdict["stdin"] = True
        else:
            optsdict["infile"] = args[0]
    else:
        if len(args) > 2:
            parser.error("Too many arguments")
        elif len(args) == 0 and not (options.display ):
            parser.error("Too few arguments")
        elif len(args) == 1:
            if options.display :
                # don't accept outfile for display
                optsdict["infile"] = args[0]
            else:
                #stdin
                optsdict["stdin"] = True
                optsdict["outfile"] = args[0]
        elif len(args) == 2:
            optsdict["infile"] = args[0]
            optsdict["outfile"] = args[1]

        if options.area:
            try:
                optsdict["area"] = eval(options.area)
            except:
                raise Exception('area not correct')
        else:
            optsdict["area"] = None
    return(optsdict, options)

if __name__ == "__main__":

    optsdict, options = get_options()

    import sys, tempfile
    import subprocess, os

    gp = GraffleParser()
    gi = GraffleInterpreter()
    svgTarget = TargetSvg()
    gi.setTarget(svgTarget)

    graffle_data = ""
    if optsdict["stdin"]:
        graffle_data = sys.stdin.read()
        gi.dict = GraffleParser().walkGraffle(graffle_data)
    else:
        gi.dict = GraffleParser().walkGraffleFile(optsdict["infile"])

    try:
        page = int(options.page or 0)
        gi.extractPage(page=page, bounding_box=optsdict["area"])
    except:
        gi.extractPage()

    if options.display:
        # write a temp file and open that
        outfile, filename = tempfile.mkstemp(suffix=".svg")
        f = open(filename,"wb")
        f.write(gi.target.svg)
        f.close()
        if os.name == 'mac':
            subprocess.call(('open', filename))
        elif os.name == 'nt':
            subprocess.call(('start', filename))
        elif os.name == "posix":
            subprocess.call(('xdg-open', filename))

    elif options.stdout:
        #print to stdout
        sys.stdout.buffer.write(gi.target.svg)
    else:
        f = open(optsdict["outfile"],"wb")
        f.write(gi.target.svg)
        f.close()
